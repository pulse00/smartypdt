/* The following code was generated by JFlex 1.2.2 on 2/13/08 9:35 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/*nlsXXX*/
package org.eclipse.php.smarty.internal.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.php.core.PHPVersion;
import org.eclipse.php.internal.core.documentModel.parser.AbstractPHPLexer;
import org.eclipse.php.internal.core.documentModel.parser.PHPRegionContext;
import org.eclipse.php.internal.core.documentModel.parser.PHPLexerFactory;
import org.eclipse.php.internal.core.documentModel.parser.regions.PHPScriptRegion;
import org.eclipse.php.core.project.ProjectOptions;
import org.eclipse.php.smarty.core.SmartyCorePlugin;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 2/13/08 9:35 PM from the specification file
 * <tt>file:/C:/workspace/org.eclipse.php.smarty.core/src/org/eclipse/php/smarty/internal/core/documentModel/parser/devTools/SmartyTokenizer.jflex</tt>
 */
public class SmartyTokenizer implements BlockTokenizer, PHPRegionContext, DOMRegionContext, SmartyRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 12;
  final public static int ST_SMARTY_DOUBLE_QUOTES = 26;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 16;
  final public static int ST_XML_DECLARATION_CLOSE = 10;
  final public static int ST_XML_TAG_NAME = 5;
  final public static int ST_XML_ATTRIBUTE_VALUE = 8;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 14;
  final public static int ST_XML_ATTRIBUTE_NAME = 6;
  final public static int ST_XML_DOCTYPE_DECLARATION = 11;
  final public static int ST_XML_ELEMENT_DECLARATION = 15;
  final public static int ST_XML_ATTLIST_DECLARATION = 17;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 23;
  final public static int ST_ABORT_EMBEDDED = 24;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_SMARTY_DOUBLE_QUOTES_SPECIAL = 27;
  final public static int ST_SMARTY_CONTENT = 25;
  final public static int ST_XML_COMMENT = 3;
  final public static int ST_PHP_CONTENT = 20;
  final public static int ST_CDATA_END = 2;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 22;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 18;
  final public static int ST_BLOCK_TAG_SCAN = 19;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 21;
  final public static int ST_XML_DECLARATION = 9;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_EQUALS = 7;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 13;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\4\1\23\2\0\1\14\22\0\1\14\1\22\1\11\1\53"+
    "\1\72\1\17\1\12\1\13\1\21\1\21\1\51\1\16\1\16\1\6"+
    "\1\5\1\3\12\15\1\10\1\56\1\1\1\43\1\2\1\31\1\16"+
    "\1\27\1\57\1\25\1\26\1\36\1\54\1\35\1\63\1\40\1\35"+
    "\1\35\1\34\1\33\1\42\1\41\1\45\1\35\1\35\1\37\1\30"+
    "\1\55\2\35\1\35\1\44\1\35\1\24\1\73\1\20\1\71\1\7"+
    "\1\74\1\47\1\57\1\60\1\50\1\36\1\54\1\35\1\63\1\40"+
    "\2\35\1\34\1\33\1\42\1\41\1\45\1\35\1\35\1\37\1\46"+
    "\1\55\1\35\1\35\1\32\1\44\1\35\1\64\1\52\1\65\1\71"+
    "\70\66\1\70\10\66\27\67\1\66\37\67\1\66\10\67\62\61\2\0"+
    "\13\61\2\0\10\61\1\0\65\61\1\0\104\61\11\0\44\61\3\0"+
    "\2\61\4\0\36\61\70\0\131\61\22\0\7\61\16\0\2\62\56\0"+
    "\106\62\32\0\2\62\44\0\1\61\1\62\3\61\1\0\1\61\1\0"+
    "\24\61\1\0\54\61\1\0\7\61\3\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\1\61\1\0\22\61\15\0\14\61\1\0\102\61\1\0"+
    "\14\61\1\0\44\61\1\0\4\62\11\0\65\61\2\0\2\61\2\0"+
    "\2\61\3\0\34\61\2\0\10\61\2\0\2\61\67\0\46\61\2\0"+
    "\1\61\7\0\46\61\12\0\21\62\1\0\27\62\1\0\3\62\1\0"+
    "\1\62\1\0\2\62\1\0\1\62\13\0\33\61\5\0\3\61\56\0"+
    "\32\61\5\0\1\62\12\61\10\62\15\0\12\62\6\0\1\62\107\61"+
    "\2\0\5\61\1\0\17\61\1\0\4\61\1\0\1\61\17\62\2\61"+
    "\2\62\1\0\4\62\2\0\12\62\u0207\0\3\62\1\0\65\61\2\0"+
    "\1\62\1\61\20\62\3\0\4\62\3\0\12\61\2\62\2\0\12\62"+
    "\21\0\3\62\1\0\10\61\2\0\2\61\2\0\26\61\1\0\7\61"+
    "\1\0\1\61\3\0\4\61\2\0\1\62\1\0\7\62\2\0\2\62"+
    "\2\0\3\62\11\0\1\62\4\0\2\61\1\0\3\61\2\62\2\0"+
    "\12\62\2\61\20\0\1\62\2\0\6\61\4\0\2\61\2\0\26\61"+
    "\1\0\7\61\1\0\2\61\1\0\2\61\1\0\2\61\2\0\1\62"+
    "\1\0\5\62\4\0\2\62\2\0\3\62\13\0\4\61\1\0\1\61"+
    "\7\0\12\62\2\62\3\61\14\0\3\62\1\0\7\61\1\0\1\61"+
    "\1\0\3\61\1\0\26\61\1\0\7\61\1\0\2\61\1\0\5\61"+
    "\2\0\1\62\1\61\10\62\1\0\3\62\1\0\3\62\22\0\1\61"+
    "\5\0\12\62\21\0\3\62\1\0\10\61\2\0\2\61\2\0\26\61"+
    "\1\0\7\61\1\0\2\61\2\0\4\61\2\0\1\62\1\61\6\62"+
    "\3\0\2\62\2\0\3\62\10\0\2\62\4\0\2\61\1\0\3\61"+
    "\4\0\12\62\22\0\2\62\1\0\6\61\3\0\3\61\1\0\4\61"+
    "\3\0\2\61\1\0\1\61\1\0\2\61\3\0\2\61\3\0\3\61"+
    "\3\0\10\61\1\0\3\61\4\0\5\62\3\0\3\62\1\0\4\62"+
    "\11\0\1\62\17\0\11\62\21\0\3\62\1\0\10\61\1\0\3\61"+
    "\1\0\27\61\1\0\12\61\1\0\5\61\4\0\7\62\1\0\3\62"+
    "\1\0\4\62\7\0\2\62\11\0\2\61\4\0\12\62\22\0\2\62"+
    "\1\0\10\61\1\0\3\61\1\0\27\61\1\0\12\61\1\0\5\61"+
    "\4\0\7\62\1\0\3\62\1\0\4\62\7\0\2\62\7\0\1\61"+
    "\1\0\2\61\4\0\12\62\22\0\2\62\1\0\10\61\1\0\3\61"+
    "\1\0\27\61\1\0\20\61\4\0\6\62\2\0\3\62\1\0\4\62"+
    "\11\0\1\62\10\0\2\61\4\0\12\62\221\0\56\61\1\0\1\61"+
    "\1\62\2\61\7\62\5\0\6\61\1\62\10\62\1\0\12\62\47\0"+
    "\2\61\1\0\1\61\2\0\2\61\1\0\1\61\2\0\1\61\6\0"+
    "\4\61\1\0\7\61\1\0\3\61\1\0\1\61\1\0\1\61\2\0"+
    "\2\61\1\0\2\61\1\0\1\61\1\62\2\61\6\62\1\0\2\62"+
    "\1\61\2\0\5\61\1\0\1\62\1\0\6\62\2\0\12\62\76\0"+
    "\2\62\6\0\12\62\13\0\1\62\1\0\1\62\1\0\1\62\4\0"+
    "\2\62\10\61\1\0\41\61\7\0\24\62\1\0\6\62\4\0\6\62"+
    "\1\0\1\62\1\0\25\62\3\0\7\62\1\0\1\62\346\0\46\61"+
    "\12\0\47\61\11\0\1\61\1\0\2\61\1\0\3\61\1\0\1\61"+
    "\1\0\2\61\1\0\5\61\51\0\1\61\1\0\1\61\1\0\1\61"+
    "\13\0\1\61\1\0\1\61\1\0\1\61\3\0\2\61\3\0\1\61"+
    "\5\0\3\61\1\0\1\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\3\0\2\61\3\0\2\61\1\0\1\61\50\0\1\61\11\0\1\61"+
    "\2\0\1\61\2\0\2\61\7\0\2\61\1\0\1\61\1\0\7\61"+
    "\50\0\1\61\4\0\1\61\10\0\1\61\u0c06\0\234\61\4\0\132\61"+
    "\6\0\26\61\2\0\6\61\2\0\46\61\2\0\6\61\2\0\10\61"+
    "\1\0\1\61\1\0\1\61\1\0\1\61\1\0\37\61\2\0\65\61"+
    "\1\0\7\61\1\0\1\61\3\0\3\61\1\0\7\61\3\0\4\61"+
    "\2\0\6\61\4\0\15\61\5\0\3\61\1\0\7\61\323\0\15\62"+
    "\4\0\1\62\104\0\1\61\3\0\2\61\2\0\1\61\121\0\3\61"+
    "\u0e82\0\1\62\1\0\1\61\31\0\11\61\6\62\1\0\5\62\13\0"+
    "\124\61\4\0\2\62\2\0\2\62\2\0\132\61\1\0\3\62\6\0"+
    "\50\61\u1cd3\0\u51a6\61\u0c5a\0\u2ba4\61\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    61,   122,   183,   244,   305,   366,   427,   488,   549, 
      610,   671,   732,   793,   854,   915,   976,  1037,  1098,  1159, 
     1220,  1281,  1342,  1403,  1464,  1525,  1586,  1647,  1708,  1769, 
     1830,  1891,  1952,  2013,  1952,  2074,  2135,  1952,  1952,  2013, 
     2196,  2257,  1952,  2318,  2379,  2440,  2501,  2562,  2623,  1952, 
     2684,  2745,  2806,  2867,  2928,  2989,  1952,  3050,  3111,  3172, 
     2013,  3233,  3294,  3355,  3416,  3477,  3477,  3538,  3599,  3660, 
     3721,  3721,  3782,  3843,  3904,  3965,  3965,  4026,  4087,  4148, 
     4209,  1952,  4270,  4270,  4331,  4392,  4453,  4514,  1952,  1952, 
     2074,  1952,  2074,  4575,  4636,  4697,  1952,  4758,  4819,  1952, 
     4880,  1952,  2074,  1952,  4941,  5002,  1952,  5063,  5124,  5185, 
     1952,  5246,  5307,  5368,  1952,  5429,  1952,  5246,  1952,  1952, 
     1952,  5490,  5551,  5612,  5673,  5734,  5795,  5856,  5917,  5978, 
     1952,  6039,  2684,  6100,  2867,  1952,  2928,  5490,  6161,  6222, 
     6283,  3233,  1952,  6344,  6405,  3477,  6466,  3538,  1952,  6527, 
     6588,  6649,  6649,  6710,  6771,  3660,  3477,  3721,  6832,  3782, 
     1952,  6893,  3843,  3904,  3721,  3965,  6954,  4026,  1952,  7015, 
     7076,  7137,  7137,  7198,  7259,  7320,  4270,  7381,  4331,  1952, 
     7442,  7503,  7564,  7564,  7625,  7686,  7747,  1952,  4758,  1952, 
     4880,  5063,  1952,  7808,  5185,  1952,  7869,  7930,  7991,  8052, 
     8113,  8174,  8235,  8296,  8357,  1952,  8418,  8479,  1952,  1952, 
     1952,  8540,  8601,  8662,  8723,  8784,  6527,  8845,  8845,  7015, 
     8906,  8906,  8967,  7442,  9028,  9028,  9089,  9150,  9211,  1952, 
     9272,  9333,  9394,  1952,  9455,  9516,  9577,  9638,  9699,  9760, 
     6710,  7198,  9821,  7625,  9882,  9943, 10004, 10065, 10126,  8174, 
    10187, 10248, 10309, 10370, 10431, 10492, 10553, 10614,  1952, 10675, 
    10736, 10797, 10858,  1952,  1952, 10919, 10980, 11041, 11102,  1952, 
     1952,  1952, 11163, 11224, 11285, 11346, 11407, 11468, 11529,  1952, 
     4148,  4453,  5307
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\35\1\36\10\35\1\37\4\35\1\40\55\35\1\41"+
    "\1\42\73\41\1\43\1\44\16\43\1\45\2\43\1\46"+
    "\51\43\1\47\1\50\73\47\1\43\1\44\4\43\1\51"+
    "\14\43\1\46\51\43\1\52\1\36\1\53\1\54\3\52"+
    "\2\55\14\52\4\56\1\52\11\56\1\52\5\56\3\52"+
    "\2\56\1\52\3\56\1\52\1\56\3\52\1\56\5\52"+
    "\1\43\1\57\1\53\1\54\1\60\2\43\2\61\3\43"+
    "\1\60\6\43\1\60\1\43\4\61\1\43\11\61\1\43"+
    "\5\61\3\43\2\61\1\43\3\61\1\43\1\61\3\43"+
    "\1\61\6\43\1\57\1\53\1\54\1\60\2\43\2\61"+
    "\3\43\1\60\6\43\1\60\1\43\4\61\1\43\11\61"+
    "\1\62\5\61\3\43\2\61\1\43\3\61\1\43\1\61"+
    "\3\43\1\61\5\43\1\63\1\64\1\53\1\65\1\60"+
    "\4\63\1\66\1\63\1\67\1\60\6\63\1\60\51\63"+
    "\1\43\1\70\1\71\1\43\1\60\7\43\1\60\6\43"+
    "\1\60\2\43\1\72\1\73\6\43\1\74\10\43\1\73"+
    "\1\72\25\43\1\75\1\71\1\43\1\60\7\43\1\60"+
    "\6\43\1\60\1\76\51\43\1\75\1\71\1\43\1\60"+
    "\2\43\2\77\3\43\1\60\6\43\1\60\1\76\4\77"+
    "\1\43\11\77\1\43\5\77\3\43\2\77\1\43\3\77"+
    "\1\43\1\77\3\43\1\77\6\43\1\75\1\71\1\43"+
    "\1\60\7\43\1\60\6\43\1\60\1\76\12\43\1\100"+
    "\5\43\1\101\27\43\1\102\1\75\1\71\1\103\1\60"+
    "\4\102\1\104\1\102\1\105\1\60\6\102\1\60\1\106"+
    "\50\102\1\107\1\75\1\71\1\110\1\60\4\107\1\111"+
    "\1\107\1\112\1\60\6\107\1\60\1\113\50\107\1\114"+
    "\1\75\1\71\1\115\1\60\4\114\1\116\1\114\1\117"+
    "\1\60\6\114\1\60\51\114\1\120\1\121\1\122\72\120"+
    "\1\123\1\75\1\71\1\124\1\60\4\123\1\125\1\123"+
    "\1\126\1\60\6\123\1\60\51\123\1\127\1\130\1\131"+
    "\72\127\1\132\1\133\73\132\1\134\1\135\15\134\1\136"+
    "\11\134\1\136\43\134\1\137\1\140\11\137\1\141\37\137"+
    "\1\142\16\137\1\142\2\137\1\143\1\140\7\143\1\144"+
    "\41\143\1\145\16\143\1\145\2\143\1\43\1\75\21\43"+
    "\1\46\52\43\1\44\21\43\1\46\51\43\1\146\1\147"+
    "\2\150\1\151\2\150\1\152\1\150\1\153\1\150\1\154"+
    "\1\151\1\155\5\150\1\151\1\150\4\152\1\150\11\152"+
    "\1\150\5\152\1\156\1\150\1\146\2\152\1\146\2\152"+
    "\2\146\1\152\1\146\1\157\3\152\1\150\1\160\2\146"+
    "\1\161\1\162\7\161\1\163\60\161\1\164\1\161\1\165"+
    "\1\43\1\44\1\150\2\43\2\150\1\152\5\43\1\155"+
    "\3\43\1\150\1\43\1\46\1\43\4\152\1\43\11\152"+
    "\1\43\5\152\3\43\2\152\1\43\2\152\2\43\1\152"+
    "\2\43\3\152\1\43\1\166\1\43\1\167\1\35\1\0"+
    "\10\35\1\0\4\35\1\0\55\35\3\0\1\170\13\0"+
    "\1\171\2\0\1\172\6\0\1\173\47\0\1\174\2\0"+
    "\2\175\3\0\1\174\6\0\1\174\1\0\4\175\1\0"+
    "\11\175\1\0\5\175\2\0\1\176\2\175\1\0\3\175"+
    "\1\0\1\175\3\0\1\175\11\0\1\174\2\0\2\177"+
    "\3\0\1\174\6\0\1\174\1\0\4\177\1\0\11\177"+
    "\1\0\5\177\3\0\2\177\1\0\3\177\1\0\1\177"+
    "\3\0\1\177\121\0\1\171\2\0\1\200\6\0\1\173"+
    "\65\0\1\200\72\0\1\201\62\0\1\202\66\0\1\52"+
    "\3\0\21\52\4\0\1\52\11\0\1\52\5\0\3\52"+
    "\2\0\1\52\3\0\1\52\1\0\3\52\1\0\5\52"+
    "\2\0\1\203\72\0\1\52\3\0\1\52\4\55\4\52"+
    "\1\55\7\52\4\56\1\52\11\56\1\52\5\56\3\52"+
    "\2\56\1\52\3\56\1\55\1\56\3\52\1\56\1\55"+
    "\4\52\5\0\4\56\4\0\1\56\7\0\4\56\1\0"+
    "\11\56\1\0\5\56\3\0\2\56\1\0\5\56\3\0"+
    "\2\56\7\0\1\170\3\0\2\204\6\0\1\171\2\0"+
    "\1\172\2\0\4\204\1\173\11\204\1\0\5\204\3\0"+
    "\2\204\1\0\3\204\1\0\1\204\3\0\1\204\11\0"+
    "\1\60\7\0\1\60\6\0\1\60\56\0\4\61\4\0"+
    "\1\61\7\0\4\61\1\0\11\61\1\0\5\61\3\0"+
    "\2\61\1\0\5\61\3\0\2\61\4\0\1\63\2\0"+
    "\1\205\1\0\4\63\1\0\1\63\2\0\6\63\1\0"+
    "\51\63\3\0\1\170\3\0\2\206\6\0\1\171\2\0"+
    "\1\172\2\0\4\206\1\173\11\206\1\0\5\206\3\0"+
    "\2\206\1\0\3\206\1\0\1\206\3\0\1\206\5\0"+
    "\1\63\1\0\1\203\1\205\1\0\4\63\1\0\1\63"+
    "\2\0\6\63\1\0\51\63\1\207\1\0\7\207\1\210"+
    "\63\207\1\211\1\0\11\211\1\210\61\211\3\0\1\170"+
    "\13\0\1\171\2\0\1\212\6\0\1\173\104\0\1\213"+
    "\63\0\1\214\15\0\1\214\62\0\1\215\40\0\20\216"+
    "\1\217\54\216\5\0\4\77\4\0\1\77\7\0\4\77"+
    "\1\0\11\77\1\0\5\77\3\0\2\77\1\0\5\77"+
    "\3\0\2\77\50\0\1\220\105\0\1\221\17\0\1\102"+
    "\2\0\1\222\1\0\4\102\1\0\1\102\2\0\6\102"+
    "\1\0\51\102\1\104\1\0\1\223\1\224\1\223\4\104"+
    "\1\225\1\104\2\223\6\104\1\223\51\104\1\226\1\0"+
    "\1\227\1\230\1\227\4\231\1\227\1\226\1\232\1\233"+
    "\3\231\1\226\2\231\1\233\1\226\25\231\1\226\6\231"+
    "\2\226\1\231\6\226\1\231\2\226\1\106\2\216\1\234"+
    "\1\216\4\106\1\216\1\106\2\216\3\106\1\235\2\106"+
    "\1\216\51\106\1\107\2\0\1\236\1\0\4\107\1\0"+
    "\1\107\2\0\6\107\1\0\51\107\1\111\2\237\1\240"+
    "\1\237\4\111\1\241\1\111\2\237\6\111\1\237\51\111"+
    "\1\112\2\242\1\243\1\242\4\112\1\242\1\112\1\241"+
    "\1\242\6\112\1\242\51\112\1\113\2\216\1\244\1\216"+
    "\4\113\1\216\1\113\2\216\3\113\1\245\2\113\1\216"+
    "\51\113\1\114\2\0\1\246\1\0\4\114\1\0\1\114"+
    "\2\0\6\114\1\0\51\114\1\116\1\0\1\247\1\250"+
    "\1\247\4\116\1\251\1\116\2\247\6\116\1\247\51\116"+
    "\1\252\1\0\1\253\1\254\1\253\4\255\1\253\1\252"+
    "\1\256\1\257\3\255\1\252\2\255\1\257\1\252\25\255"+
    "\1\252\6\255\2\252\1\255\6\252\1\255\2\252\2\120"+
    "\1\0\74\120\1\0\17\120\1\260\52\120\1\123\2\0"+
    "\1\261\1\0\4\123\1\0\1\123\2\0\6\123\1\0"+
    "\51\123\1\125\1\0\1\262\1\263\1\262\4\125\1\264"+
    "\1\125\2\262\6\125\1\262\51\125\1\265\1\0\1\266"+
    "\1\267\1\266\4\270\1\266\1\265\1\271\1\272\3\270"+
    "\1\265\2\270\1\272\1\265\25\270\1\265\6\270\2\265"+
    "\1\270\6\265\1\270\2\265\2\127\1\0\74\127\1\0"+
    "\17\127\1\273\52\127\2\0\1\274\72\0\1\137\1\0"+
    "\11\137\1\0\37\137\1\275\16\137\1\275\2\137\3\0"+
    "\1\276\13\0\1\171\2\0\1\200\6\0\1\173\43\0"+
    "\64\137\1\0\10\137\1\143\1\0\7\143\1\0\41\143"+
    "\1\277\16\143\1\277\66\143\1\0\10\143\4\0\1\151"+
    "\7\0\1\151\6\0\1\151\60\0\1\152\5\0\1\152"+
    "\7\0\4\152\1\0\11\152\1\0\5\152\3\0\2\152"+
    "\1\0\2\152\2\0\1\152\2\0\3\152\4\0\13\300"+
    "\1\301\57\300\1\302\1\300\15\0\1\155\57\0\51\303"+
    "\1\304\23\303\7\0\1\305\15\0\4\305\1\0\11\305"+
    "\1\0\5\305\3\0\2\305\1\0\2\305\2\0\1\305"+
    "\2\0\3\305\4\0\11\161\1\0\60\161\1\0\1\161"+
    "\1\0\11\161\1\0\10\161\1\306\47\161\1\0\1\161"+
    "\10\0\1\307\15\0\4\307\1\0\11\307\1\0\5\307"+
    "\3\0\2\307\1\0\2\307\2\0\1\307\2\0\3\307"+
    "\12\0\1\310\15\0\1\311\54\0\1\312\7\0\1\312"+
    "\6\0\1\312\21\0\1\313\33\0\1\174\2\0\2\35"+
    "\3\0\1\174\6\0\1\174\1\0\4\35\1\0\11\35"+
    "\1\0\5\35\3\0\2\35\1\0\3\35\1\0\1\35"+
    "\3\0\1\35\5\0\1\314\1\0\2\314\1\315\4\175"+
    "\1\314\1\0\1\314\1\315\1\175\1\314\1\0\3\314"+
    "\1\315\1\314\4\175\1\314\11\175\1\314\5\175\3\314"+
    "\2\175\1\316\5\175\3\314\2\175\4\314\15\0\1\317"+
    "\14\0\1\320\42\0\1\314\1\0\2\314\1\315\4\177"+
    "\1\314\1\0\1\314\1\315\1\177\1\314\1\0\3\314"+
    "\1\315\1\314\4\177\1\314\11\177\1\314\5\177\3\314"+
    "\2\177\1\321\5\177\3\314\2\177\4\314\24\0\1\311"+
    "\52\0\1\322\74\0\1\323\77\0\4\204\4\0\1\204"+
    "\7\0\4\204\1\0\11\204\1\0\5\204\3\0\2\204"+
    "\1\0\5\204\3\0\2\204\11\0\4\206\4\0\1\206"+
    "\7\0\4\206\1\0\11\206\1\0\5\206\3\0\2\206"+
    "\1\0\5\206\3\0\2\206\31\0\1\324\32\0\1\324"+
    "\44\0\1\325\15\0\1\325\64\0\1\326\75\0\1\327"+
    "\114\0\1\330\15\0\1\223\1\0\7\223\1\225\63\223"+
    "\1\226\1\0\1\227\1\331\1\227\4\226\1\227\1\226"+
    "\1\225\1\227\6\226\1\227\51\226\1\227\1\0\11\227"+
    "\1\225\61\227\1\226\1\0\1\227\1\331\1\227\4\226"+
    "\1\227\1\226\1\332\1\227\6\226\1\227\51\226\13\0"+
    "\1\333\61\0\1\227\1\0\11\227\1\332\61\227\11\237"+
    "\1\241\63\237\13\242\1\241\61\242\1\247\1\0\7\247"+
    "\1\251\63\247\1\252\1\0\1\253\1\334\1\253\4\252"+
    "\1\253\1\252\1\251\1\253\6\252\1\253\51\252\1\253"+
    "\1\0\11\253\1\251\61\253\1\252\1\0\1\253\1\334"+
    "\1\253\4\252\1\253\1\252\1\335\1\253\6\252\1\253"+
    "\51\252\13\0\1\336\61\0\1\253\1\0\11\253\1\335"+
    "\61\253\2\120\1\0\21\120\1\337\50\120\1\262\1\0"+
    "\7\262\1\264\63\262\1\265\1\0\1\266\1\340\1\266"+
    "\4\265\1\266\1\265\1\264\1\266\6\265\1\266\51\265"+
    "\1\266\1\0\11\266\1\264\61\266\1\265\1\0\1\266"+
    "\1\340\1\266\4\265\1\266\1\265\1\341\1\266\6\265"+
    "\1\266\51\265\13\0\1\342\61\0\1\266\1\0\11\266"+
    "\1\341\61\266\2\127\1\0\21\127\1\343\50\127\23\300"+
    "\1\0\51\300\7\0\1\305\5\0\1\305\7\0\4\305"+
    "\1\0\11\305\1\0\5\305\3\0\2\305\1\0\2\305"+
    "\2\0\1\305\2\0\3\305\4\0\11\161\1\0\12\161"+
    "\1\344\45\161\1\0\1\161\10\0\1\307\5\0\1\307"+
    "\6\0\1\345\4\307\1\0\11\307\1\0\5\307\3\0"+
    "\2\307\1\0\2\307\2\0\1\307\2\0\3\307\12\0"+
    "\1\346\113\0\1\347\53\0\1\312\7\0\1\312\6\0"+
    "\1\312\134\0\1\350\11\0\1\314\1\0\10\314\1\0"+
    "\4\314\1\0\36\314\1\0\17\314\1\0\2\314\1\315"+
    "\5\314\1\0\1\314\1\315\2\314\1\0\3\314\1\315"+
    "\32\314\1\351\16\314\15\0\1\317\40\0\1\352\33\0"+
    "\1\353\7\0\3\353\6\0\1\353\10\0\2\353\3\0"+
    "\1\353\2\0\2\353\44\0\1\354\15\0\1\354\62\0"+
    "\1\355\73\0\1\356\71\0\1\357\15\0\1\357\62\0"+
    "\1\360\43\0\1\361\1\0\4\361\2\0\1\232\4\361"+
    "\1\0\3\361\1\0\25\361\1\0\6\361\2\0\1\361"+
    "\6\0\1\361\5\0\1\362\1\0\4\362\2\0\1\256"+
    "\4\362\1\0\3\362\1\0\25\362\1\0\6\362\2\0"+
    "\1\362\6\0\1\362\2\0\2\120\1\0\22\120\1\363"+
    "\47\120\3\0\1\364\1\0\4\364\2\0\1\271\4\364"+
    "\1\0\3\364\1\0\25\364\1\0\6\364\2\0\1\364"+
    "\6\0\1\364\2\0\2\127\1\0\22\127\1\365\47\127"+
    "\11\161\1\0\13\161\1\366\44\161\1\0\1\161\10\0"+
    "\1\367\5\0\1\370\7\0\4\367\1\0\11\367\1\0"+
    "\5\367\3\0\2\367\1\0\2\367\2\0\1\367\2\0"+
    "\3\367\32\0\1\371\113\0\1\372\4\0\1\372\100\0"+
    "\1\351\33\0\1\353\7\0\3\353\6\0\1\353\10\0"+
    "\2\353\3\0\1\353\1\0\1\352\2\353\60\0\1\373"+
    "\70\0\1\374\72\0\1\375\74\0\1\376\76\0\1\377"+
    "\34\0\2\120\1\0\23\120\1\u0100\46\120\2\127\1\0"+
    "\23\127\1\u0101\46\127\11\161\1\0\14\161\1\u0102\43\161"+
    "\1\0\1\161\10\0\1\367\5\0\1\367\2\0\1\u0103"+
    "\4\0\4\367\1\0\11\367\1\0\5\367\3\0\2\367"+
    "\1\0\2\367\2\0\1\367\2\0\3\367\21\0\1\370"+
    "\2\0\1\u0103\103\0\1\u0104\112\0\1\u0105\66\0\1\u0106"+
    "\77\0\1\u0107\65\0\1\u0108\66\0\1\u0109\32\0\1\u0109"+
    "\14\0\2\120\1\0\24\120\1\u010a\45\120\2\127\1\0"+
    "\24\127\1\u010b\45\127\11\161\1\0\15\161\1\u010c\42\161"+
    "\1\0\1\161\31\0\1\u010d\102\0\1\u010e\66\0\1\u010f"+
    "\15\0\1\u010f\56\0\1\u0110\15\0\1\u0110\26\0\2\120"+
    "\1\0\25\120\1\u0111\44\120\2\127\1\0\25\127\1\u0112"+
    "\44\127\11\161\1\0\16\161\1\u0113\41\161\1\0\1\161"+
    "\30\0\1\u0114\45\0\2\120\1\0\24\120\1\u0115\45\120"+
    "\2\127\1\0\24\127\1\u0116\45\127\11\161\1\0\15\161"+
    "\1\u0117\42\161\1\0\1\161\25\0\1\u0118\50\0\2\120"+
    "\1\0\21\120\1\u0119\50\120\2\127\1\0\21\127\1\u011a"+
    "\50\127\11\161\1\0\12\161\1\u011b\45\161\1\0\1\161"+
    "\1\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1, 
     9,  1,  9,  1,  1,  9,  9,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  1,  1,  1,  1, 
     9,  1,  1,  9,  1,  9,  1,  9,  1,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  9,  1,  9,  1,  9,  9,  9,  1,  1,  0,  1,  0,  1,  0, 
     0,  0,  9,  1,  0,  1,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0, 
     9,  0,  0,  0,  1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1, 
     0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  9,  0,  9,  0,  0, 
     9,  0,  0,  9,  1,  1,  1,  0,  0,  1,  0,  1,  1,  9,  0,  0, 
     9,  9,  9,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0, 
     1,  0,  1,  1,  0,  9,  0,  0,  1,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  9,  0,  0,  0,  0,  9,  9,  1,  1,  1,  0,  9,  9,  9, 
     1,  1,  1,  0,  1,  1,  1,  9,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private String fBufferedText = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	
	// help for php container text region
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;


	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has 
	// been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private String text = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;
	
	// The left and right delimiters
	public static String smartyLeftDelim = "{";
	public static String smartyRightDelim = "}";
	
	private final XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();

/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean allowPHP, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			
			/**
			 * Look for starting PHPs "<?"
			 */
			// Look for a PHP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && 
					(yy_buffer[yy_currentPos] == '?' || (yy_buffer[yy_currentPos] == '%' && ProjectOptions.isSupportingASPTags(project)))) {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			
			// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
			// ---
			// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && yy_buffer[yy_currentPos] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
			// ---
			// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
			// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
					yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '<' && yy_buffer[yy_startRead + 1] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_startRead;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}

			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			if (n == YYEOF) {
				stillSearching = false;
			}
			else {
				same = true;
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				
				// safety check for array accesses (yy_currentPos is the *last* character we can check against)
				if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
					for(i = 0; i < searchStringLength; i++) {
						if(same && fIsCaseSensitiveBlocking)
							same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
						else if(same && !fIsCaseSensitiveBlocking)
							same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
					}
				}
				// safety check failed; no match is possible right now
				else {
					same = false;
				}
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}

/**
 * Method doScanEndPhp
 * 
 * @see doScan(searchString, req...) 
 * this version can handle two strings as options to search string
 * it originally written to support ?> or %> close tags to php
 * The two strings must be on the same length
 *
 * @param isAsp - whether the asp %> close is premited
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private ITextRegion bufferedTextRegion = null;
private final String doScanEndPhp(boolean isAsp, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	yypushback(1); // begin with the last char
	
	final AbstractPHPLexer phpLexer = getPhpLexer(); 
	bufferedTextRegion = new PHPScriptRegion(searchContext, yychar, phpVersion, false, false, phpLexer);

	// restore the locations / states
	reset(yy_reader, phpLexer.getZZBuffer(), phpLexer.getParameters());
	
	yybegin(exitState);
	return searchContext;
}

/**
 * @param project
 * @param stream
 * @return a new lexer for the given project with the given stream
 */
private AbstractPHPLexer getPhpLexer() {
	final PHPVersion phpVersion = ProjectOptions.getPHPVersion(project.getProject());
	final AbstractPHPLexer lexer = PHPLexerFactory.createLexer(yy_reader, phpVersion);
	int[] currentParameters = getParamenters();
	try {
		// set initial lexer state - we use reflection here since we don't know the constant value of 
		// of this state in specific PHP version lexer 
		currentParameters[6] = lexer.getClass().getField("ST_PHP_IN_SCRIPTING").getInt(lexer);
	} catch (Exception e) {
		Logger.logException(e);
	}
	lexer.initialize(currentParameters[6]);
	try {
		Method method = lexer.getClass().getMethod("reset", new Class[] {yy_reader.getClass(), yy_buffer.getClass(), currentParameters.getClass()});
		if (!method.isAccessible()) {
			method.setAccessible(true);
		}
		method.invoke(lexer, yy_reader, yy_buffer, currentParameters);
	} catch (NoSuchMethodException e) {
		SmartyCorePlugin.log(e);
	} catch (SecurityException e) {
		SmartyCorePlugin.log(e);
	} catch (IllegalAccessException e) {
		SmartyCorePlugin.log(e);
	} catch (IllegalArgumentException e) {
		SmartyCorePlugin.log(e);
	} catch (InvocationTargetException e) {
		SmartyCorePlugin.log(e);
	}
	lexer.setAspTags(ProjectOptions.isSupportingASPTags(project));
	return lexer;
}

// call the doScan without searching for PHP internal code
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	return doScan(searchString, true, requireTailSeparator, searchContext, exitState, immediateFallbackState);	
}

	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {

				ITextRegion newToken;
				// if it is php content we extract the tokens
				if (internalContext == PHP_CONTENT) {
					newToken = bufferedTextRegion; 
					bufferedTextRegion.adjustStart(-containerStart);
				} else {
					newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				}
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength() );
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container

					ITextRegion newToken;
					// if it is php content we extract the tokens
					if (internalContext == PHP_CONTENT) {
						newToken = bufferedTextRegion; 
						bufferedTextRegion.adjustStart(-containerStart);
					} else {
						newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					}

					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}

	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		return true;
	}

/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}

private IProject project;
private PHPVersion phpVersion;
private int ST_PHP_IN_SCRIPTING = -1; 

public void setProject(IProject project) {
	this.project = project;
	this.phpVersion = ProjectOptions.getPHPVersion(project);
}

public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
	this.yy_reader = reader;
	this.yy_buffer = buffer;
	this.yy_markedPos = parameters[0];
	this.yy_pushbackPos = parameters[1];
	this.yy_currentPos = parameters[2];
	this.yy_startRead = parameters[3];
	this.yy_endRead = parameters[4];
	this.yyline = parameters[5];  
	this.yychar = this.yy_startRead - this.yy_pushbackPos;
}

public int[] getParamenters(){
	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
}

/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		text = fBufferedText;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		} else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		text = yytext();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = text;
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	} else if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	} else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	} else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedText = yytext();
	if (fBufferedContext == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = fBufferedText;
		else
			fCurrentTagName = null;
	}
	else if (fBufferedContext == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (fBufferedContext == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}else {
		fShouldLoadBuffered = true;
	}
	if (context == null) {
		// EOF
		if (Debug.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;

	// if it is php content we extract the tokens
	if (context == PHP_CONTENT) {
		return bufferedTextRegion; 
	} else {
		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
}

/* user method */
public SmartyTokenizer(){
	super();
}
/* user method */
public SmartyTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fLastInternalBlockStart = -1;	

	fTokenCount = 0;
	
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedText = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	text = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		SmartyTokenizer newInstance = new SmartyTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", true, false,  XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmartyTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SmartyTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[11590];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3250) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}
/* user method - skeleton.sse */
protected final String findSmartyDelimiter(String text, String insideOf, String delim, String delimType, int afterDelimType){
	final int startChar = text.indexOf(delim);
	//System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
	if (startChar != -1) {
		//System.err.println("a");
		//go to the char right before the text, so it doesnt mark the whole thing red...
		if (startChar > 0){
			//System.err.println("b");
			//push to right before the delim
			yypushback(yylength() - startChar);
			//return YYINITIAL;
		} else {
			//System.err.println("c");
			yybegin(afterDelimType);
			// pushback to just after the closing bracket
			int delemLen = delim.length();
			yypushback(yylength() - startChar - delemLen);
			return delimType;
		}
	}
	//System.err.println("d"+insideOf);
	return insideOf;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 279: 
        case 280: 
        case 281: 
        case 282: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 284: break;
        case 271: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 285: break;
        case 270: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 286: break;
        case 269: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 287: break;
        case 264: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 288: break;
        case 263: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 289: break;
        case 233: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 290: break;
        case 229: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 291: break;
        case 210: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 292: break;
        case 209: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 293: break;
        case 208: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 294: break;
        case 205: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 295: break;
        case 196: 
        case 198: 
        case 258: 
          { 
	return SMARTY_VARIABLE;
 }
        case 296: break;
        case 195: 
          { 
	return SMARTY_COMMENT;
 }
        case 297: break;
        case 192: 
          { 
    return SMARTY_CONSTANT_ENCAPSED_STRING;
 }
        case 298: break;
        case 189: 
          { 
	// begin embedded region: " + fEmbeddedHint);//$NON-NLS-1$
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// Php attribute value start - end tag
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 299: break;
        case 187: 
          { 
	yybegin(fStateStack.pop());
	return PHP_CLOSE;
	
 }
        case 300: break;
        case 142: 
        case 156: 
        case 164: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 301: break;
        case 133: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 302: break;
        case 131: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 303: break;
        case 130: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	// empty tag close
    return XML_EMPTY_TAG_CLOSE;
 }
        case 304: break;
        case 121: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 305: break;
        case 120: 
        case 122: 
        case 201: 
          { 
    if (ProjectOptions.isSupportingASPTags(project) ||yytext().charAt(1) != '%') {
		//removeing trailing whitespaces for the php open
		String phpStart = yytext();
		int i = phpStart.length() - 1; 
		while(i >= 0 && Character.isWhitespace(phpStart.charAt(i--))){
			yypushback(1);
		}

		fStateStack.push(yystate());
		if(fStateStack.peek()==YYINITIAL) {
			// the simple case, just a regular scriptlet out in content
			yybegin(ST_PHP_CONTENT);
			return PHP_OPEN;
		}
		else {
			if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if(yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_PHP_CONTENT);
			assembleEmbeddedContainer(PHP_OPEN, PHP_CLOSE);
			if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if(yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			}
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
    }
    yypushback(1);
	yybegin(ST_XML_TAG_NAME);
	return XML_TAG_OPEN;
 }
        case 306: break;
        case 119: 
          { 
	// end tag open
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 307: break;
        case 118: 
          { 
	yybegin(ST_SMARTY_DOUBLE_QUOTES);
    return SMARTY_BACKTICK_END;
 }
        case 308: break;
        case 116: 
          { 
	yybegin(ST_SMARTY_DOUBLE_QUOTES_SPECIAL);
    return SMARTY_BACKTICK_START;
 }
        case 309: break;
        case 114: 
          { 
	yybegin(ST_SMARTY_CONTENT);
    return SMARTY_DOUBLE_QUOTES_END;
 }
        case 310: break;
        case 112: 
        case 113: 
        case 197: 
        case 227: 
        case 245: 
        case 257: 
        case 267: 
        case 274: 
        case 278: 
          { 
    return SMARTY_DOUBLE_QUOTES_CONTENT;
 }
        case 311: break;
        case 110: 
          { 
	//TODO: Figure out how to change the end delimiter, so that 
	//this.rightSmartyDelimiter is used (so it can be changed in config)
	yybegin(YYINITIAL);
	return SMARTY_CLOSE;
 }
        case 312: break;
        case 108: 
          { 
    return SMARTY_NUMBER;
 }
        case 313: break;
        case 106: 
          { 
	yybegin(ST_SMARTY_DOUBLE_QUOTES);
    return SMARTY_DOUBLE_QUOTES_START;
 }
        case 314: break;
        case 54: 
          { 
	// begin embedded region: " + fEmbeddedHint
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	// JSP attribute value start - complex single quoted
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_SQUOTE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 315: break;
        case 53: 
          { 
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_DQUOTE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 316: break;
        case 50: 
        case 135: 
          { 
	// attr value
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 317: break;
        case 49: 
          { 
	// equals
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 318: break;
        case 48: 
          { 
	// attr name
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 319: break;
        case 44: 
        case 45: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 320: break;
        case 42: 
          { 
	// tag close
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 321: break;
        case 38: 
        case 39: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 322: break;
        case 37: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 323: break;
        case 0: 
        case 28: 
        case 124: 
        case 126: 
        case 203: 
        case 204: 
        case 232: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
		
	final String text = yytext();
	assert text != null;

	// checks the smarty case
	return findSmartyDelimiter(text, XML_CONTENT, smartyLeftDelim, SMARTY_OPEN, ST_SMARTY_CONTENT);
 }
        case 324: break;
        case 5: 
        case 41: 
          { 
	// inappropriate tag name
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 325: break;
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 47: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 326: break;
        case 16: 
        case 79: 
        case 80: 
        case 175: 
        case 222: 
        case 242: 
        case 255: 
        case 265: 
        case 272: 
        case 276: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 327: break;
        case 18: 
        case 86: 
        case 87: 
        case 186: 
        case 226: 
        case 244: 
        case 256: 
        case 266: 
        case 273: 
        case 277: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 328: break;
        case 29: 
        case 46: 
        case 51: 
        case 55: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    return XML_TAG_OPEN;
 }
        case 329: break;
        case 30: 
        case 31: 
        case 34: 
        case 35: 
        case 36: 
        case 40: 
        case 43: 
        case 52: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 66: 
        case 71: 
        case 76: 
        case 83: 
        case 97: 
        case 100: 
        case 115: 
        case 117: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 330: break;
        case 32: 
        case 33: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 331: break;
        case 56: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 332: break;
        case 62: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 333: break;
        case 65: 
        case 67: 
        case 68: 
        case 69: 
        case 148: 
        case 149: 
        case 152: 
        case 153: 
        case 217: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 334: break;
        case 70: 
        case 72: 
        case 73: 
        case 74: 
        case 160: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 335: break;
        case 75: 
        case 77: 
        case 78: 
        case 168: 
        case 169: 
        case 172: 
        case 173: 
        case 220: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 336: break;
        case 81: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 337: break;
        case 82: 
        case 84: 
        case 85: 
        case 179: 
        case 180: 
        case 183: 
        case 184: 
        case 224: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 338: break;
        case 88: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 339: break;
        case 91: 
        case 92: 
        case 93: 
          { 
	return doScanEndPhp(ProjectOptions.isSupportingASPTags(project), PHP_CONTENT, ST_PHP_CONTENT, ST_PHP_CONTENT);
 }
        case 340: break;
        case 94: 
        case 98: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 341: break;
        case 95: 
          { 
	// begin embedded region: " + fEmbeddedHint
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// tag inside of JSP attribute value start
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 342: break;
        case 96: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 343: break;
        case 99: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 344: break;
        case 101: 
        case 107: 
          { 
	return doScan(smartyRightDelim, false, false, SMARTY_CONTENT, ST_SMARTY_CONTENT, ST_SMARTY_CONTENT);
 }
        case 345: break;
        case 102: 
        case 103: 
        case 109: 
        case 111: 
          { 
	return SMARTY_DELIMITER;
 }
        case 346: break;
        case 104: 
          { 
	return SMARTY_WHITESPACE;
 }
        case 347: break;
        case 105: 
          { 
	return SMARTY_LABEL;
 }
        case 348: break;
        case 89: 
        case 90: 
          { 
		return doBlockTagScan();
	 }
        case 349: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
